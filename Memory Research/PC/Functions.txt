PTLE+B2CD0
- Harry's update function

	+B2D2C : cmp dword [PTLE+4EA1D8], 0 : Skips the entire function if you swap the condition
	  -> What is PTLE+4EA1D8
	call PTLE+B1290 : Harry's keyboard movements (camera still anticipates), spawn stuff like TNT!!!
	call PTLE+BA820 : (unknown)
	call PTLE+C2930 : Harry's pose (turn him into a fuggin ghost)
	call PTLE+B3C40 : (unknown)
	call PTLE+AFA80 : Apply root motion!?
	call PTLE+B4150 : Teleport graphic character to physical character?
	call PTLE+B5C30 : Position-related bullshit
	call PTLE+B2EB0 : (unknown)

---

PTLE+158150
- Projectile constructor
- Called for TNTs, coconuts thrown by natives

	+158189 : mov [ecx], PTLE+493210 : Writes the vtable pointer into the projectile's memory

---

PTLE+213E80
- Add projectile to collision world

---

PTLE+2265A0
- Add entity to world (unsure)
- Works on projectiles, particle effects, and probably everything because disabling it crashes level loads
- Parameters :
  - ECX : THE WORLD (vtable = 008A5D08)
  - Stack(0) : Entity to be added
  - Stack(1) : Origin / Parent entity (4 bytes)
  - Stack(2) : ??? (value is 0, 4 bytes)

	+2265C5 : call PTLE+225610 : Actually does the adding

---

PTLE+225610
- Add entity to world (unsure)
- Parameters :
  - ECX : THE WORLD (vtable = 008A5D08)
  - Stack(0) : ??? (value is 0)
  - Stack(1) : Entity to be added (Stack(0) from caller)
  - Stack(2) : Stack(1) from caller, but only the first byte
  - Stack(3) : Stack(2) from caller

---

PTLE+224AC0
- Critical initialization function for entities loaded from a level file

---

PTLE+197400
- Idol / Floating item initialization routine
- Parameters :
  - ECX : Idol instance
  - Stack(0) : (unknown stack-allocated structure)
  - Stack(1) : (unknown stack-allocated structure)
  - Stack(2) : (unknown stack-allocated structure)
  - Stack(3) : (unknown stack-allocated structure)
  - Stack(4) : (unknown stack-allocated structure)

---

PTLE+226A20
- Get available memory for entity instead of using malloc
- Parameters :
  - ECX : World
  - Stack(0) : ???

---

PTLE+225C20
- Loop to create entities on level load
- Happens on world loading step 3, both at initial loads and respawns

---

PTLE+1953C0
- Harry's TNT Toss
- Parameters :
  - ECX : TNT Pointer (refer to PTLE+4EEBE8)

	+19540E : call PTLE+157840 : This creates the memory for a TNT.
	+195960 : call PTLE+159640 : This adds TNT to the world (presumably).

---

PTLE+2F35C0
- Supposedly spawns visuals for entities

---

PTLE+1DBE0
- Merc's TNT positioning
- Called at PTLE+1022D6
- Parameters
  - ECX : Merc instance
  - Stack(0) : Pointer to math results
  - Stack(1) : ???
  - Stack(2) : ???
- Returns
  - EAX : Pointer to math results (Stack(0))

---

PTLE+102130
- Entire TNT spawn mechanic for mercs (adding to world, ticking, aiming)

	+1021E5 : call PTLE+157840        : Creates the projectile entity
	+102278 : je PTLE+102363          : Alternates between two merc throws
	+102358 : call dword [edx+0x138]  : Merc throw 1
	+1023E9 : call dword [edx+0x13C]  : Merc throw 2

---

PTLE+124A70
- Coconut spawn mechanic for natives

	+124AF5 : call PTLE+157840

---

PTLE+159640
- Projectile init stuff
- Parameters
  - ECX : Projectile pointer (vtable = 00893210)
  - Stack(0) : Position?
  - Stack(1) : Direction 3D vector pointer (4 bytes pointer to 3 * 4 bytes)
  - Stack(2) : Who threw the projectile
  - Stack(3) : ??? (value is 1)

---

PTLE+1BDA0
- Critical shit, don't disable
- Linked to rendering, probably

---

PTLE+2F2FA0
- Get class info
- Parameters :
  - Stack(0) : Class ID
- Returns :
  - EAX : Pointer to class info structure

---

PTLE+2C7FA0 and PTLE+2F3CB0
- Unknown

---

PTLE+ACC10
- Harry constructor
- Called by PTLE+1EBC00

---

PTLE+105B60
- Create item objects
- Items are generated in the following order :
  - Sling       (PTLE+00106A50)
  - Torch       (PTLE+00106AC0)
  - Pickaxes    (PTLE+00106B30)
  - TNT         (PTLE+00106BA0)
  - Shield      (PTLE+00106C10)
  - Raft        (PTLE+00106C80)
  - Gas Mask    (PTLE+00106CF0)
  - Canteen     (PTLE+00106D60)
  - Stink Bomb  (PTLE+00106DD0)

---

PTLE+1EBBB0
- Triggers a world load
- This function gets the world to load by parameter

---

PTLE+1EBC00
- Loading world
- Async function using a jump table to separate its steps
- Step 0 : Not loading
- Step 1 : (unused)
- Step 2 : 001EBC51 - 001EBE87
  - Create Harry
  - Create some more stuff
- Step 3 : 001EBE8C - 001EBF86
  - Loads in the bulk, presumably
- Step 4 : 001EBF8B - 001EC024
  - WEATHERMAN
- Step 5 : 001EC029 - 001EC077
  - Setup?
  - Adds Harry to the world
- Step 6 : 001EC07C - 001EC199
  - Finalizes level setup


	+1EBD84 : push 0x10
	          push 0x00001A20
	          call PTLE+217D70
	          -> Responsible for allocating Harry data (size 1A20 = 6688 bytes, align 16)

---

PTLE+213C80
- Removes flags from entity (flags = flags & ~value)
- Parameters
  - ECX : Entity pointer
  - Stack(0) : Flags to remove

---

PTLE+227EB0
- Related to game updates
- On disable, everything stops moving, but rendering is still on
- Pause menu still works too

	call PTLE+2280B0 : Disabling it causes debris to remain static
	call PTLE+2252A0 : DON'T TOUCH, IT CRASHES
	call PTLE+2B48A0 : ???

	+227F17 : for loop
		+227F59 : call dword [edx+2C] : Polymorphic update function!?
		For loop stops on [ebp-08] == 0, so null pointer
		[ebp-08] seems to be a pointer to a 32-bits entry inside a double-linked list
		Each entry contains a pointer to the entity (the actual vtable thing)
		Next entry is at offset 0x10.

---

PTLE+171490
- Saves the game

---

PTLE+B42B1   ->   call PTLE+21A970
PTLE+21AAE7  ->   call dword ptr [eax+04]
This function call is responsible for Harry's pose update.

---

PTLE+2253BD  ->   call PTLE+2279B0


---

PTLE+2EC7B0
- Load identity 4x4 matrix
- Parameters
  - ECX : Pointer to matrix data

---

PTLE+2252D0 : Crashes if you change its contents

PTLE+226600 : That spawns Harry's punch hit particles (and others, like Sham magic)
